using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MHD.Properties;
using HtmlAgilityPack;
using System.Xml;
using Newtonsoft.Json;

namespace MHD
{
    public class Transport
    {
        string _url;
        string _name;
        //TransportType _type;
        List<Destination> _destinations;
        private string _date;

        public Transport() 
        {
            Destinations = new List<Destination>();
        }

        public Transport(string url, string name, string date = "")
        {
            Destinations = new List<Destination>();
            Url = url;
            Name = name;
            Date = date;
        }

        public string Url 
        {
            get { return _url; }
            set { _url = value; }
        }

        public string Name 
        {
            get { return _name; }
            set { _name = value; }
        }

        public List<Destination> Destinations
        {
            get { return _destinations; }
            set { _destinations = value; }
        }

        public string Date
        {
            get { return _date; }
            set { _date = value; }
        } 

        //public TransportType Type 
        //{
        //    get { return _type; }
        //    set { _type = value; }
        //}

        public override string ToString()
        {
            return string.Format("{0} - {1}", Name, Url);
        }

        public bool Load() 
        {
            var webGet = new HtmlWeb();
            HtmlDocument document = webGet.Load(Resources.IMHD_URL + Url);

            try
            {
                var node = document.DocumentNode;
                var dateNode = node.SelectSingleNode("//div[@id='content']/div/span[@class='h0'][1]");
                if (dateNode != null)
                {
                    try
                    {
                        Date = dateNode.InnerHtml.Split(' ').Last();
                        Date = Date.Substring(0, Date.Length - 1);

                        if (File.Exists(Directory.GetCurrentDirectory() + "\\data\\" + Name + ".json"))
                        {
                            StreamReader re = new StreamReader(Directory.GetCurrentDirectory() + "\\data\\" + Name + ".json");
                            JsonTextReader reader = new JsonTextReader(re);
                            JsonSerializer se = new JsonSerializer();
                            var parsedData = se.Deserialize<Transport>(reader);
                            if (parsedData.Date.Equals(Date)) return false;
                        }
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e.Message);
                        return false;
                    }
                }
                var cells = node.SelectNodes("//div[@id='content']/div/table[position()=1]/tr/td");

                Destination d1 = new Destination(cells[0]);
                Destinations.Add(d1);

                if (cells.Count > 1)
                {
                    Destination d2 = new Destination(cells[2]);
                    Destinations.Add(d2);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return false;
            }
            return true;
        }

        public void Save(string json)
        {
            if (!Directory.Exists(Directory.GetCurrentDirectory() + "\\data")) Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\data");
            File.WriteAllText(Directory.GetCurrentDirectory() + "\\data\\" + Name + ".json", json);
            //XmlWriterSettings settings = new XmlWriterSettings();
            //settings.Indent = true;
            //XmlWriter writer = XmlWriter.Create(Name + ".xml", settings);

            //writer.WriteStartDocument();

            //writer.WriteComment("This file is generated by the program.");

            //writer.WriteStartElement("transport");
            //writer.WriteAttributeString("name", Name);
            //writer.WriteAttributeString("url", Url);

            //foreach (var d in Destinations)
            //{
            //    writer.WriteStartElement("destination");
            //    writer.WriteAttributeString("name", d.Name);

            //    foreach (var s in d.Stops)
            //    {
            //        writer.WriteStartElement("stop");
            //        writer.WriteAttributeString("name", s.Name);
            //        writer.WriteAttributeString("url", s.Url);
            //        writer.WriteAttributeString("customInfo", s.CustomInfo);

            //        if (s.Departures != null)
            //        {
            //            foreach (var pair in s.Departures)
            //            {
            //                writer.WriteStartElement("dayType");
            //                writer.WriteAttributeString("type", pair.Key.ToString());

            //                foreach (var hour in pair.Value)
            //                {
            //                    writer.WriteStartElement("hour");
            //                    writer.WriteAttributeString("value", hour.Key);

            //                    foreach (var minute in hour.Value)
            //                    {
            //                        writer.WriteStartElement("minute");
            //                        writer.WriteAttributeString("value", minute);
            //                        writer.WriteEndElement();
            //                    }

            //                    writer.WriteEndElement();
            //                }

            //                writer.WriteEndElement();
            //            }
            //        }

            //        writer.WriteEndElement();
            //    }

            //    writer.WriteEndElement();
            //}

            //writer.WriteEndElement();

            //writer.WriteEndDocument();
            //writer.Flush();
            //writer.Close();
        }
    }
}
